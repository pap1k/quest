Бот имеет свой скриптовый язык
Актуальная версия скриптового языка - 0.2
Файл .QS (quest script) представляет собой текстовй документ (открывается блокнотом).
Содержание файла можно разделить на 3 возможных типа:
1) Текст - обычный текст, который бот отправляет последовательно.
2) Функции. Функция это текст, который можно выносить в отдельный блок и переиспользовать в дальшейшем.
3) Вызовы функций.

Подробнее про функции
Например, нам надо сделать так, чтобы после каждого задания бот писал один и тот же текст = "Молодцы, вот ваша буква"
В этом случае мы можем вынести этот текст в функцию. Функций определяется по следующим правилам:
- С начала строки пишется символ двоеточия (:)
- Без пробелов после двоеточие пишется название функции, которое потом мы будем использовать в сценарии. По сути, ее позывной.
- После это этого с новой строки и пишется текст функции
Пример определения функции:
-----
:ok_func
Молодцы, вот ваша буква
-----
Функции могут принимать 1 аргумент. Для этого в определении функции через пробел узказывается "позывной" аргумента.
В тексте аргумент используется с помощью позывного, заключенного в символы процента (%)
Пример использования функции с аргументом
-----
:ok_func1 let
Молодцы, вот ваша буква - %let%
-----

Подробнее про вызовы фунций.
Мы научились определять функции, теперь поговорим о том, как их вызывать.
Вызов фнукции производится с помощью обращения к ней по имени.
Для того, чтоюы программа поняла, что вы хотите обратиться по имени к одной из функций, а не просто написать текст, используются спец. символы - %
Так же, как и с параметром внутри функции, надо "обернуть" название функции в проценты.
Но для вызова необходимо еще дописать круглые скобки "()"
Круглые скобки нужны, чтобы дать понять, что мы хотим получить именно результат работы функции. Так же, в эти скобки передаются аргументы.
Пример вызова функции:
-----
О, вы справились с этим сложным заданием.
%ok_func()%
-----
Результат:
О, вы справились с этим сложным заданием.
Молодцы, вот ваша буква
-----

Пример вызова функции с аргументом:
-----
О, вы справились с этим сложным заданием.
%ok_func1(X)%
-----
Результат:
О, вы справились с этим сложным заданием.
Молодцы, вот ваша буква - X
-----

Структура файла
Файл сценария обязан содержать одну базовую функцию - start. С этого момента сценария начинает выполняться когда пользователь нажимает кнопку "START"
Исходя из этого, функция start полжна быть определена в последюю очередь. После сценария квеста не должно находиться определений других функций.

Бот считывает текст построчно и отправляет его пользователю, пока не встретится функция. Если функция не требует ожидания от пользователя никакх данных, функция выполняется.
В актуальной версии есть 4 базовых функции:
photo_request
video_request
input
input_comp

Вызов функции photo_request приостанавливает работу скрипта до момента, пока пользователь не отправит фото.
Полученное фото пересылается администраторам квеста, которые могут подтвердить это фото кнопокй.
Если администратор нажимает Принять, пользователь получает сообщение об этом, выполнение скрипта для него возобновляется.
Если администратор нажимает Отклонить, пользователь получает сообщение об этом, бот ждет еще фотографий от пользователя.

Функция video_request аналогична функции photo_request, но работает с видео и с "кружочками".

Функция input приостанавливает работу скрипта до момента, пока пользователь не введет что-либо с клавиатуры.
Введенный текст не сохраняется.

Функция input_comp приостанавливает работу скрипта до момента, пока пользователь не введет переданный в качестве аргумента в функцию текст.
Аргумент функции может состоять из любого набора символов кроме палочки (|). Этот символ используется для обозначения множества возможных вариантов.
Пример вызова функции input_comp:
-----
Вы все поняли?
%input_comp(да)%
Отлично, тогда продолжаем
-----
В данном случае сообщение после функции "Отлично ..." не отправится пользователю, пока тот не введет "да".
Другой пример:
-----
Вы все поняли?
%input_comp(да|конечно|естественно)%
Отлично, тогда продолжаем
-----
В данном случае сообщение после функции "Отлично ..." не отправится пользователю, пока тот не введет любой из вариантов: "да", "конечно", "естественно".
Нет необходимости указывать все возможные варианты написания одного и того же слова. Бот приводит любой текст к нижнему регистру и только потом сравнивает.
Так же бот удаляет пробелы в начале и в конце слова (фразы).
Поэтому ситуации, когда ожидается "ответ", а пользователь написал "Ответ ", ботом обрабатываются нормально.

